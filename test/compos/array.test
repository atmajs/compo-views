UTest({
	$config: {
		'http.process': {
			command: 'npm run examples',
			matchReady: '/Listen /'
		}
	},
	$before (next) {
		UTest
			.server
			.request('http://localhost:5771/examples/index.html?array')
			.done((doc, win) => {
				next(doc, win, win.app.find('Array').model);
			});
	},
	'should have dropdowns' (done, doc, win, model) {
		is_(model, 'Object');
		is_(model.__observers, 'Object');
		is_(model.__observers.roles, 'Array');
		is_(model.__observers.roles[0], 'Function');
		UTest
			.domtest(doc.body, `
				find('select') {
					eq (0) {
						val user;
					}
					eq (1) {
						val admin;
					}
				}
			`)
			.always(() => done(doc, win, model));
	},
	'should change user' (done, doc, win, model) {
		var check = (expect) => eq_(model.roles[0].role, expect);
		check('user');
		UTest
			.domtest(doc.body, `
				find('select') {
					do select moderator;
				}
			`)
			.done(() => check('moderator'))
			.always(() => done(doc, win, model));
	},
	'should add array item' (done, doc, win, model) {
		eq_(model.roles.length, 2);
		
		win.app.emitIn('arrayItemAdd');
		eq_(model.roles.length, 3);
		
		done(doc, win, model);
	},
	'should remove array item' (done, doc, win, model) {
		eq_(model.roles.length, 3);
		eq_(model.roles[0].role, 'moderator');
		eq_(model.roles[1].role, 'admin');
		
		win
			.app
			.$
			.find('button[data-signals=",arrayItemRemove,"]')
			.eq(0)
			.click();
		
		eq_(model.roles.length, 2);
		eq_(model.roles[0].role, 'admin');
		done(doc, win, model);
	}
	
})